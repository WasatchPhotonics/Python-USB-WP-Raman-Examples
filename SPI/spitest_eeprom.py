import time
import random
import Adafruit_GPIO as GPIO
import Adafruit_GPIO.FT232H as FT232H
FT232H.use_FT232H()
# Find the first FT232H device.
ft232h = FT232H.FT232H()
# Create a SPI interface from the FT232H using pin 8 (C0) as chip select.
# Use a clock speed of 3mhz, SPI mode 0, and most significant bit first.
spi = FT232H.SPI(ft232h, cs=3, max_speed_hz=10000000, mode=0, bitorder=FT232H.MSBFIRST)
# Write three bytes (0x01, 0x02, 0x03) out using the SPI protocol.

# generate from list of bytes, converting into string
'''import crc8
data = [0x00, 0x03, 0xe8, 0x91, 0x04]
hash = crc8.crc8()
hash.update("0x0491e80300")
print( hash.hexdigest() )'''

def bytes(integer):
    return divmod(integer, 0x100)

import crcmod.predefined
crc8 = crcmod.predefined.mkPredefinedCrcFun('crc-8-maxim')
print hex(crc8('\x04\x91\xe8\x03\x00'))

ft232h.setup(7, GPIO.OUT) # Make pin D7 a digital output
ft232h.setup(6, GPIO.IN) # Make pin D6 a digital input

hexlist = [x for x in range(5,68,1)]
#
hexlist.insert(0, 177)
hexlist.insert(0, 65)
hexlist.insert(0, 0)
hexlist.append(1)
#
crc_input = ''.join([chr(x) for x in hexlist])
crc = (crc8(crc_input))
print("new way: %s (from %s)" % (crc, crc_input))
hexlist.append(crc)
hexlist.append(62)
hexlist.insert(0, 60)

padding = [0 for x in range(78)]

allffs = [200 for x in range(64)]
allffs.insert(0, 177)
allffs.insert(0, 65)
allffs.insert(0, 0)
#
crc_input = ''.join([chr(x) for x in allffs])
crc = (crc8(crc_input))
print("new way: %s (from %s)" % (crc, crc_input))
allffs.append(crc)
allffs.append(62)
allffs.insert(0, 60)	

print hexlist	

#f= open("results.csv","w")
#response = spi.transfer([0x3C, 0x00, 0x03, 0x92, 0x87, 0x40, 0xE8, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
#response = spi.transfer([0x3C, 0x00, 0x03, 0x92, 0x86, 0x40, 0x2C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
#spi.write([0x3C, 0x00, 0x03, 0x94, 0xE7, 0x01, 0x7B, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
#spi.write([0x3C, 0x00, 0x03, 0x93, 0xc4, 0x89, 0xdb, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

#write the eprom buffer
spi.write(hexlist)
#spi.write([0x3C, 0x00, 0x09, 0xB1, 0x01, 0x00, 0x01, 0x02, 0x03, 0x0A, 0x0B, 0x0C, 0xA3, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])


#read the eeprombuffer
spi.write([0x3C, 0x00, 0x01, 0x31, 0x24, 0x3E])
spi.write(padding)

#write the buffer to the EEPROM page 4
#epromwrite = spi.transfer([0x3C, 0x00, 0x02, 0xB0, 0x80, 0xC1, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
epromwrite = spi.transfer([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])
spi.write([0x3C, 0x00, 0x02, 0xB0, 0x84, 0xA0, 0x3E])

#read the eeprom command
spi.write([0x3C, 0x00, 0x01, 0x30, 0x7A, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

#change the buffer contents
spi.write(allffs)


#write the EEPROM command (read???)
#epromwrite = spi.transfer([0x3C, 0x00, 0x02, 0xB0, 0x40, 0x0B, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
#epromwrite = spi.transfer([0x3C, 0x00, 0x02, 0xB0, 0x41, 0x55, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
#epromwrite = spi.transfer([0x3C, 0x00, 0x02, 0xB0, 0x42, 0xB7, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
#epromwrite = spi.transfer([0x3C, 0x00, 0x02, 0xB0, 0x43, 0xE9, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
epromwrite = spi.transfer([0x3C, 0x00, 0x02, 0xB0, 0x44, 0x6A, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

#read the eeprom command
spi.write([0x3C, 0x00, 0x01, 0x30, 0x7A, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

#read the eeprombuffer
spi.write([0x3C, 0x00, 0x01, 0x31, 0x24, 0x3E])
spi.write(padding)

#spi.write([0x3C, 0x00, 0x02, 0x30, 0x80, 0xEE, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
#eprombuffer = spi.transfer([0x3C, 0x00, 0x01, 0x31, 0x24, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
#print eprombuffer


								
								